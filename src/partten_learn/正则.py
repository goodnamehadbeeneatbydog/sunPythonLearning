#!/usr/bin/env python3 告诉Linux,这是一个py可执行文件
# -*- coding: utf-8 -*- 告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码

s = "ABC\\-001"  # Python的字符串
# 对应的正则表达式字符串变成：
# 'ABC\-001'

s = r'ABC\-001'
import re

p = r'^\d{3}-\d{3,8}$'
print(re.match(p, '010-12345'))
print(re.match(p, '010 12345'))

print('a b  c'.split(' '))

print(re.split(r'\s+', 'a b  c'))

print(re.split(r'[\s,]+','a,b,c d'))

print(re.split(r'[\s,;]+', 'a,b;; c  d'))
g = r'^(\d{3})-(\d{3,8})$'
m = re.match(g, '010-12345')
print(m.group(0),m.group(1),m.group(2))
# 如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。
#
# 注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。

t = '19:05:30'
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
print(m.groups())

# 这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：
# #
# # '^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$'

print(re.match(r'^(\d+)(0*)$', '102300').groups())

# 由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。
# #
# # 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：

print(re.match(r'^(\d+?)(0*)$', '102300').groups())

# 编译
# 当我们在Python中使用正则表达式时，re模块内部会干两件事情：
#
# 编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
#
# 用编译后的正则表达式去匹配字符串。
#
# 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，
# 接下来重复使用时就不需要编译这个步骤了，直接匹配：

re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')

print(re_telephone.match('010-0023987').groups())
print(re_telephone.match('010-8086').groups())
#编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。



